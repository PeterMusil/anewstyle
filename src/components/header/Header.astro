---
import Icon from "../icons/Icon.astro";
---

<header>
  <video
    class="header__video"
    id="headerVideo"
    aria-label="Anew style header video"
    preload="metadata"
    autoplay
    loop
    muted></video>
  <div class="header__content">
    <div>
      <h1>Anew style</h1>
    </div>
    <strong data-localize="header_title"></strong>
    <div class="header__buttons">
      <a
        class="button"
        href="#about"
        id="headerMoreButton"
        aria-label="Přejít na sekci o nás"
        rel="noopener"
      >
        <span data-localize="header_btn_more"></span>
      </a>
      <!-- E-shop button - visible on desktop only -->
      <a
        class="button button--secondary header__eshop-btn"
        href="https://www.anewstyle-eshop.cz"
        rel="external"
        target="_blank"
        aria-label="Přejít na e-shop"
      >
        <span data-localize="header_btn_eshop"></span>
        <Icon name="eshop" iconClass="icon-header" />
      </a>
      <!-- AR button - visible on tablet and mobile only -->
      <button
        class="button button--secondary header__ar-btn"
        id="headerArButton"
        type="button"
        aria-label="Zobrazit v AR u mě doma"
        data-loading="false"
        data-error="false"
      >
        <span>Zobraz u mňe doma</span>
        <Icon name="ar" iconClass="icon-header" />
      </button>
    </div>
  </div>
</header>

<style>
  /* Android AR compatibility - hide model-viewer from users but keep it functional */
  model-viewer[style*="position: fixed"] {
    visibility: hidden !important;
    pointer-events: none !important;
    user-select: none !important;
  }
</style>

<script>
  import "@google/model-viewer";

  // AR functionality with Android compatibility
  async function activateARForModel(modelPath: string): Promise<void> {
    try {
      // Create a container that's positioned off-screen but visible to Android
      const arContainer = document.createElement("div");
      arContainer.style.position = "fixed";
      arContainer.style.top = "-100px"; // Position above viewport
      arContainer.style.left = "-100px"; // Position left of viewport
      arContainer.style.width = "50px";
      arContainer.style.height = "50px";
      arContainer.style.zIndex = "-9999";
      arContainer.style.opacity = "0.01"; // Almost invisible but not 0
      arContainer.style.pointerEvents = "none";
      arContainer.style.overflow = "hidden";
      arContainer.style.background = "transparent";

      // Create model-viewer element
      const modelViewer = document.createElement("model-viewer") as any;

      // Set attributes
      modelViewer.setAttribute("src", modelPath);
      modelViewer.setAttribute("ar", "");
      modelViewer.setAttribute("ar-scale", "auto");
      modelViewer.setAttribute("ar-modes", "webxr scene-viewer quick-look");
      modelViewer.setAttribute("camera-controls", "");
      modelViewer.setAttribute("touch-action", "pan-y");
      modelViewer.setAttribute("camera-orbit", "0deg 90deg 2.5m");

      // Style the model-viewer to fill the container
      modelViewer.style.width = "100%";
      modelViewer.style.height = "100%";
      modelViewer.style.display = "block";

      // Add model-viewer to container
      arContainer.appendChild(modelViewer);

      // Add container to DOM
      document.body.appendChild(arContainer);

      // Wait for model-viewer to be ready
      await new Promise<void>((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error("Model load timeout"));
        }, 15000);

        const checkReady = () => {
          if (typeof modelViewer.activateAR === "function") {
            clearTimeout(timeout);
            resolve();
          } else {
            setTimeout(checkReady, 100);
          }
        };

        // Start checking immediately
        checkReady();

        // Also listen for load event
        modelViewer.addEventListener(
          "load",
          () => {
            clearTimeout(timeout);
            resolve();
          },
          { once: true }
        );

        modelViewer.addEventListener(
          "error",
          (error: any) => {
            clearTimeout(timeout);
            reject(error);
          },
          { once: true }
        );
      });

      // Small delay to ensure model is fully loaded
      await new Promise((resolve) => setTimeout(resolve, 500));

      // Check if AR is available
      if (modelViewer.canActivateAR === false) {
        throw new Error("AR is not supported on this device");
      }

      // Activate AR
      modelViewer.activateAR();

      // Clean up after AR session
      setTimeout(() => {
        if (document.body.contains(arContainer)) {
          document.body.removeChild(arContainer);
        }
      }, 3000);
    } catch (error) {
      console.error("Failed to activate AR:", error);
      throw error;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Video initialization
    const videoElement = document.querySelector(
      "#headerVideo"
    ) as HTMLVideoElement;
    const screenWidth = window.innerWidth;

    if (screenWidth > 560 && videoElement) {
      const sources = [
        { src: "./videos/main-video.mp4", type: "video/mp4" },
        { src: "./videos/main-video.webm", type: "video/webm" },
        { src: "./videos/main-video.ogv", type: "video/ogg" },
      ];

      sources.forEach((source) => {
        const sourceElement = document.createElement("source");
        sourceElement.src = source.src;
        sourceElement.type = source.type;
        videoElement.appendChild(sourceElement);
      });
    } else if (videoElement) {
      videoElement.remove();
    }

    // AR button initialization
    const arButton = document.querySelector(
      "#headerArButton"
    ) as HTMLButtonElement;

    if (!arButton) {
      console.warn("AR button not found");
      return;
    }

    arButton.addEventListener("click", async () => {
      try {
        // Show loading state
        arButton.disabled = true;
        arButton.setAttribute("data-loading", "true");

        // Activate AR
        await activateARForModel(
          "./3d/products/Rockfoil_DARKGOLD_3D_vertical.glb"
        );

        // Restore button state
        arButton.disabled = false;
        arButton.setAttribute("data-loading", "false");
      } catch (error) {
        console.error("AR activation failed:", error);

        // Show error state
        arButton.disabled = false;
        arButton.setAttribute("data-loading", "false");
        arButton.setAttribute("data-error", "true");

        // Reset error state after 2 seconds
        setTimeout(() => {
          arButton.setAttribute("data-error", "false");
        }, 2000);
      }
    });
  });
</script>
